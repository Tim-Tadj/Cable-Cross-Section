# physics.py
"""
Manages the setup of the Pymunk physics space, including gravity, damping,
and collision handlers. Also handles adding static conduit elements to the space.
"""
import pymunk
from config import COLLTYPE_CABLE, COLLTYPE_CONDUIT # Custom collision type constants
from cable import cable_collision_handler # Specific handler for cable-to-cable collisions
from conduit import create_conduit_segments # Function to get conduit's physics segments

def setup_physics() -> pymunk.Space:
    """
    Initializes and configures the Pymunk physics space.

    Sets up global physics properties like gravity and damping.
    It also configures a collision handler for interactions between cables.

    Returns:
        pymunk.Space: The configured Pymunk space object.
    """
    space = pymunk.Space()
    space.gravity = (0.0, 981.0)  # Standard gravity in Pygame coordinates (y-downwards)
    space.damping = 0.5           # Damping to reduce overall energy and stabilize simulation

    # Setup a collision handler for cable-to-cable collisions.
    # COLLTYPE_CABLE is an integer constant defined in config.py.
    # When two shapes with this collision_type interact, the specified handler functions are called.
    handler = space.add_collision_handler(COLLTYPE_CABLE, COLLTYPE_CABLE)
    
    # The 'separate' callback is triggered when two shapes stop overlapping.
    # cable_collision_handler is a function (defined in cable.py) that will be
    # called to manage the physics of this interaction (e.g., apply impulses).
    # Other callbacks like 'begin', 'pre_solve', 'post_solve' could also be used
    # for different stages of collision handling.
    handler.separate = cable_collision_handler # Using 'separate' might be less common than 'begin' or 'pre_solve' for active repulsion.
                                               # This implies the handling logic is applied when they move apart.
                                               # Consider if `pre_solve` or `begin` would be more appropriate for typical collision responses.
    
    return space

def add_conduit_to_space(space: pymunk.Space):
    """
    Adds the static conduit segments to the given Pymunk space.

    The conduit is composed of a static body and multiple segment shapes
    which are generated by `create_conduit_segments` (from conduit.py).

    Args:
        space (pymunk.Space): The Pymunk space to which the conduit will be added.
    """
    # Retrieve the static body and list of segment shapes for the conduit
    conduit_static_body, conduit_segments_list = create_conduit_segments()
    
    # Add the static body to the space. This body itself doesn't collide but acts as an anchor.
    space.add(conduit_static_body)
    
    # Add each segment shape to the space. These are the actual collision boundaries.
    for segment in conduit_segments_list:
        space.add(segment)
